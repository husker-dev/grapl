import groovy.json.*

project.ext.useJavaPlatform = project.plugins.hasPlugin("java-platform")

apply plugin: 'maven-publish'
apply plugin: 'signing'

if(!project.ext.useJavaPlatform) {
    apply plugin: 'java-library'
    java {
        withJavadocJar()
        withSourcesJar()
    }
}


abstract class ProjectMavenPublishConfiguration {
    abstract Property<String> getArtifactId()
    abstract Property<String> getName()
    abstract Property<String> getDescription()
}

class MavenPublishPlugin implements Plugin<Project> {
    ProjectMavenPublishConfiguration config
    Project project

    void apply(Project project) {
        project.getPlugins().apply(this.class)
        this.project = project
        config = project.extensions.create('maven', ProjectMavenPublishConfiguration)

        def component = (project.ext.useJavaPlatform ?
                project.components.javaPlatform :
                project.components.java)

        // Create custom configuration to include in .pom
        project.configurations {
            silentApi {
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, 'java-api'))
                }
            }
        }
        component.addVariantsFromConfiguration(project.configurations.silentApi) {
            it.mapToMavenScope("compile")
        }

        // Edit .module file, generated by gradle - adding pomOnlyCompile dependencies to apiElements
        project.tasks.withType(GenerateModuleMetadata) {
            doLast {
                def moduleJson = new JsonSlurper().parseText(outputFile.get().asFile.text)
                def apiElements = moduleJson.variants.find { it.name == "apiElements" }
                def runtimeElements = moduleJson.variants.find { it.name == "runtimeElements" }
                def customVariant = moduleJson.variants.find { it.name == "silentApi" }

                if(customVariant.dependencies != null) {

                    apiElements.dependencies += customVariant.dependencies
                    runtimeElements.dependencies += customVariant.dependencies
                    moduleJson.variants.remove(customVariant)

                    outputFile.get().asFile.text = new JsonBuilder(moduleJson).toPrettyString()
                }
            }
        }

        // Apply parameters from user configuration
        project.afterEvaluate {
            project.publishing {
                publications {
                    mavenJava(MavenPublication) {
                        artifactId = config.artifactId.getOrElse(null)
                        pom {
                            name = config.name.getOrElse(null)
                            description = config.description.getOrElse(null)
                        }
                    }
                }
            }
        }

        project.publishing {
            publications {
                mavenJava(MavenPublication){
                    from component
                    groupId = project.mvn_groupId

                    pom {
                        url = project.mvn_url

                        licenses {
                            license {
                                name = project.mvn_licence_name
                                url = project.mvn_licence_url
                            }
                        }
                        developers {
                            developer {
                                id = project.mvn_developer_id
                                name = project.mvn_developer_name
                                email = project.mvn_developer_email
                            }
                        }
                        scm {
                            connection = project.mvn_git
                            developerConnection = project.mvn_git
                            url = project.mvn_url
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releasesUrl = project.uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                    def snapshotsUrl = project.uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                    url = project.version.toString().endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl
                    credentials {
                        username = project.properties["ossrhUsername"].toString()
                        password = project.properties["ossrhPassword"].toString()
                    }
                }
            }
        }

        project.nexusStaging {
            packageGroup = project.mvn_groupId
            serverUrl = "https://s01.oss.sonatype.org/service/local/"
            username = project.properties["ossrhUsername"].toString()
            password = project.properties["ossrhPassword"].toString()
        }

        project.signing {
            if(project.properties.containsKey("ossrhUsername"))
                sign project.publishing.publications.mavenJava
        }
    }
}
apply plugin: MavenPublishPlugin
